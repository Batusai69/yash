# Makefile.in for yash: yet another shell
# (C) 2007-2009 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

.POSIX:
.SUFFIXES: .c .h .o .a

CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LDLIBS = @LDLIBS@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
DIRS = @DIRS@
SOURCES = alias.c alias.h arith.c arith.h builtin.c builtin.h common.h exec.c exec.h expand.c expand.h hashtable.c hashtable.h history.c history.h input.c input.h job.c job.h mail.c mail.h mksignum.c option.c option.h parser.c parser.h path.c path.h plist.c plist.h redir.c redir.h sig.c sig.h siglist.h strbuf.c strbuf.h util.c util.h variable.c variable.h xfnmatch.c xfnmatch.h yash.c yash.h
OBJS = @OBJS@
TARGET = @TARGET@
BYPRODUCTS = mksignum.o mksignum signum.h *.dSYM

all: $(TARGET)

.c:
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< $(LDLIBS)
.c.o:
	$(CC) $(CFLAGS) -c $<

$(TARGET): $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)
builtins/@BUILTINS_ARCHIVE@: _PHONY
	@+cd builtins && $(MAKE)
lineedit/@LINEEDIT_ARCHIVE@: _PHONY
	@+cd lineedit && $(MAKE)
signum.h: mksignum
	./mksignum > $@
sig.o: signum.h

depends: Makefile.deps
Makefile.deps: _PHONY
	@+$(MAKE) $(TARGET)
	./$(TARGET) makedepend.sh $(DIRS)
	@for d in $(DIRS); do \
		echo Remaking $$d/Makefile; \
		mv $$d/Makefile $$d/Makefile.old && \
		sed -n -e '/^#=#=#.*makedepend/q' -e 'p' \
			$$d/Makefile.old >$$d/Makefile && \
		rm -f $$d/Makefile.old && \
		cat $$d/Makefile.deps >>$$d/Makefile; \
	done

test check: all
	@+cd tests && $(MAKE) test-all

DESTDIR =
BINDIR = @BINDIR@
install: install-binary install-doc
install-strip:
	@+$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install-binary
	@+$(MAKE) install-doc
install-binary: $(TARGET) $(DESTDIR)$(BINDIR)
	$(INSTALL_PROGRAM) -c $(TARGET) $(DESTDIR)$(BINDIR)/$(TARGET)
install-doc:
	@+cd doc && $(MAKE) install
installdirs: $(DESTDIR)$(BINDIR)
	@+cd doc && $(MAKE) installdirs
$(DESTDIR)$(BINDIR):
	$(INSTALL_PROGRAM) -d $@
uninstall:
	rm -f $(DESTDIR)$(BINDIR)/$(TARGET)
	@+cd doc && $(MAKE) uninstall

PACKAGE = @PACKAGE@
VERSION = @VERSION@
DISTDIR = @DISTDIR@
DISTS = $(DISTDIR).tar.Z $(DISTDIR).tar.gz $(DISTDIR).tar.bz2 $(DISTDIR).shar.gz $(DISTDIR).zip
DISTCONTENTS = $(SOURCES) README README.ja COPYING INSTALL INSTALL.ja NEWS NEWS.ja configure Makefile.in Makefile.deps install-sh makedepend.sh
distcontents: $(DISTCONTENTS)
$(DISTDIR):
	rm -fr $@
	mkdir $@
	@+base=$$PWD; \
	for d in $(DIRS); do \
		(cd $$d && $(MAKE) DISTTARGETDIR=$$base/$@/$$d copy-distcontents) || \
		exit; \
	done
copy-distcontents: $(DISTCONTENTS)
	mkdir -p $(DISTTARGETDIR)
	@echo Copying contents to $(DISTTARGETDIR)
	@for f in $(DISTCONTENTS); do ln $$f $(DISTTARGETDIR); done
# Only pax and compress comform to POSIX.
dist-tarZ: $(DISTDIR).tar.Z
	-rm -rf $(DISTDIR)
dist dist-gzip: $(DISTDIR).tar.gz
	-rm -rf $(DISTDIR)
dist-bzip2: $(DISTDIR).tar.bz2
	-rm -rf $(DISTDIR)
dist-shar: $(DISTDIR).shar.gz
	-rm -rf $(DISTDIR)
dist-zip: $(DISTDIR).zip
	-rm -rf $(DISTDIR)
dist-all: $(DISTS)
	-rm -rf $(DISTDIR)
$(DISTDIR).tar.Z: $(DISTDIR)
	pax -w -x ustar $(DISTDIR) | compress -c > $@
$(DISTDIR).tar.gz: $(DISTDIR)
	tar -c $(DISTDIR) | gzip -c > $@
$(DISTDIR).tar.bz2: $(DISTDIR)
	tar -c $(DISTDIR) | bzip2 -9 -c > $@
$(DISTDIR).shar.gz: $(DISTDIR)
	shar -q -T $(DISTDIR) | gzip -c > $@
$(DISTDIR).zip: $(DISTDIR)
	zip -rq $@ $(DISTDIR)

# ctags conforms to POSIX, but etags and cscope do not.
CTAGSARGS = @CTAGSARGS@
ETAGSARGS = @ETAGSARGS@
tags: $(SOURCES)
	ctags $(CTAGSARGS)
TAGS: $(SOURCES)
	etags $(ETAGSARGS)
cscope: cscope.out
cscope.out: $(SOURCES)
	cscope -bR

mostlyclean: _mostlyclean
	-@+cd builtins && $(MAKE) mostlyclean
	-@+cd lineedit && $(MAKE) mostlyclean
_mostlyclean:
	-rm -rf $(OBJS) $(BYPRODUCTS) $(DISTDIR)
	-@+cd tests && $(MAKE) clean
clean: _clean
	-@+cd builtins && $(MAKE) clean
	-@+cd lineedit && $(MAKE) clean
_clean: _mostlyclean
	-rm -rf $(TARGET) $(DISTS)
distclean: _distclean
	-@+cd builtins && $(MAKE) distclean
	-@+cd lineedit && $(MAKE) distclean
	-@+cd tests    && $(MAKE) distclean
	-@+cd doc      && $(MAKE) distclean
_distclean: _clean
	-rm -rf Makefile config.cache config.log config.h version.h tags TAGS cscope.out
maintainer-clean:
	@echo 'This command is intended for maintainers to use;'
	@echo 'it deletes files that may need special tools to rebuild.'
	-rm -rf Makefile.deps
	@+$(MAKE) _distclean
	-@+cd builtins && $(MAKE) maintainer-clean
	-@+cd lineedit && $(MAKE) maintainer-clean
	-@+cd tests    && $(MAKE) maintainer-clean
	-@+cd doc      && $(MAKE) maintainer-clean

reconfigure:
	@script=$$(echo '/# Invocation command line was:/ {'; \
	echo 'n'; echo 's/^% //'; echo 'p'; echo 'q'; echo '}'); \
	if line=$$(sed -n "$$script" config.log); \
	then echo "$$line"; eval exec "$$line"; \
	else echo 'Cannot reconfigure.' >&2; false; \
	fi

.PHONY: all depends test check install install-strip install-binary install-doc installdirs uninstall dist distcontents copy-distcontents dist-tarZ dist-gzip dist-bzip2 dist-shar dist-zip dist-all cscope mostlyclean _mostlyclean clean _clean distclean _distclean maintainer-clean reconfigure
_PHONY:


