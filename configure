# Manually written configuration script for yash
# (C) 2007-2010 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

makefile="Makefile"
makefilein="Makefile.in"
configcache="config.cache"
configlog="config.log"
configh="config.h"
versionh="version.h"
tempsrc=".temp.c"
tempo=".temp.o"
tempout="./.temp.out"
temptxt="./.temp.txt"
dirs=". builtins doc lineedit tests"

target="yash"
package="yash"
version="2.18"
copyrightyear="2007-2009"

# object files to be linked as `yash'
objs="arith.o builtin.o exec.o expand.o hashtable.o input.o job.o mail.o \
option.o parser.o path.o plist.o redir.o sig.o strbuf.o util.o variable.o \
xfnmatch.o yash.o"
# object files compiled into builtins.a
builtin_objs=""
builtins_archive="builtins.a"
lineedit_archive="lineedit.a"

# object files that are optionaly linked
alias_objs="alias.o"
history_objs="history.o"
printf_objs="printf.o"
test_objs="test.o"
ulimit_objs="ulimit.o"

# dependency files
depfiles="alias.d arith.d builtin.d exec.d expand.d hashtable.d history.d input.d job.d mail.d mksignum.d option.d parser.d path.d plist.d redir.d sig.d strbuf.d util.d variable.d xfnmatch.d yash.d builtins/printf.d builtins/test.d builtins/ulimit.d lineedit/display.d lineedit/editing.d lineedit/keymap.d lineedit/lineedit.d lineedit/mkcmds.d lineedit/terminfo.d lineedit/trie.d lineedit/trietest.d lineedit/trietestw.d tests/invoke.d tests/resetsig.d"

help="no"
gcc=""
debug="no"
enable_alias="yes"
enable_array="yes"
enable_dirstack="yes"
enable_help="yes"
enable_history="yes"
enable_lineedit="yes"
enable_printf="yes"
enable_socket="yes"
enable_test="yes"
enable_ulimit="yes"
ctags_args=""
etags_args=""
unset prefix eprefix bindir datarootdir docdir htmldir
unset cacheentry cachekey checkresult
umask u=rwx,go=rx
cd "$(dirname "$0")"

parseenable() {
    case "$1" in
	*=yes|*=no|*=true|*=false) ;;
	*=*)  echo "$0: $1: invalid option" >&2;  exit 2 ;;
    esac
    opt="${1#--*able-}"
    opt="${opt%%=*}"
    case "$opt" in
	alias)        enable_alias=$2 ;;
	array)        enable_array=$2 ;;
	dirstack)     enable_dirstack=$2 ;;
	help)         enable_help=$2 ;;
	history)      enable_history=$2 ;;
	lineedit)     enable_lineedit=$2 ;;
	printf)       enable_printf=$2 ;;
	socket)       enable_socket=$2 ;;
	test)         enable_test=$2 ;;
	ulimit)       enable_ulimit=$2 ;;
	*)            echo "$0: $1: invalid option" >&2;  exit 2 ;;
    esac
}

# parse options
for i
do
    case "$i" in
	-h|--help)
	    help="yes" ;;
	-d|--debug)
	    debug="yes" ;;
	--prefix=*)
	    prefix="${i#--prefix=}" ;;
	--exec-prefix=*)
	    execprefix="${i#--exec-prefix=}" ;;
	--bindir=*)
	    bindir="${i#--bindir=}" ;;
	--datarootdir=*)
	    datarootdir="${i#--datarootdir=}" ;;
	--docdir=*)
	    docdir="${i#--docdir=}" ;;
	--htmldir=*)
	    htmldir="${i#--htmldir=}" ;;
	--enable-*=no|--enable-*=false|--disable-*)
	    parseenable "$i" "no" ;;
	--enable-*)
	    parseenable "$i" "yes" ;;
	?*=*)
	    # parse variable assignment
	    if echo "$i" |
		LC_ALL=C grep -E "^[[:alpha:]][[:alnum:]]*=" >/dev/null
	    then
		eval "${i%%=*}="'${i#*=}'
	    else
		echo "$0: $i: unknown argument" >&2
		exit 1
	    fi
	    ;;
	*)
	    echo "$0: $i: unknown argument" >&2
	    exit 1
    esac
done

if [ x"${help}" = x"yes" ]
then
    exec cat <<END
Usage: ./configure [options...]

Available options:
  --debug                configure for debug build (GCC required)

Installation options:
  --prefix=PREFIX        install architecture-independent files in PREFIX
                         [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [PREFIX]
  --bindir=DIR           install executable in DIR [EPREFIX/bin]
  --datarootdir=DIR      architecture-independent data root [PREFIX/share]
  --docdir=DIR           documentation root [DATAROOTDIR/doc/yash]
  --htmldir=DIR          HTML documentation [DOCDIR]

Optional features:
  --enable-FEATURE[=ARG]      enable or disable FEATURE [ARG=yes]
  --disable-FEATURE           disable FEATURE (same as --enable-FEATURE=no)
  --enable-alias              enable aliases
  --enable-array              enable the array builtin
  --enable-dirstack           enable the directory stack (pushd, popd, dirs)
  --enable-help               enable the help builtin
  --enable-history            enable history
  --enable-lineedit           enable command line editing
  --enable-printf             enable the echo/printf builtins
  --enable-socket             enable socket redirection by /dev/tcp, /dev/udp
  --enable-test               enable the test builtin
  --enable-ulimit             enable the ulimit builtin

Influential environment variables:
  CC, CFLAGS, CADDS, LDFLAGS, LDADDS, LDLIBS, AR, ARFLAGS, INSTALL_PROGRAM
END
    exit
fi


trap 'rm -f "${tempsrc}" "${tempo}" "${tempout}" "${temptxt}"' EXIT
trap 'rm -f "${tempsrc}" "${tempo}" "${tempout}" "${temptxt}"; exit 1' \
    HUP INT QUIT ABRT TERM PIPE USR1 USR2
trap '' ALRM

if [ -r "${configcache}" ] &&
    grep -Fqx "uname -a	$(uname -a)" "${configcache}"
then
    havecache="true"
else
    havecache="false"
    printf "uname -a\t%s\n" "$(uname -a)" >"${configcache}"
fi

exec 4>>"${configcache}"
exec 5>"${configlog}"
exec 6>"${configh}"

{
    echo "===== Configuration log: generated by configure ====="
    echo
    date
    echo
    printf '# Invocation command line was:\n%%'
    for i in "$0" "$@"
    do
	printf ' %s' "$(printf '%s\n' "$i" |
	    sed -e '/[^[:alnum:]./=-]/ {
	    s/'"'"'/'"'\\''"'/g
	    s/\(.*\)/'"'"'\1'"'"'/
	    }')"
    done
    echo
    echo
    printf '# uname -i = %s\n' "$(uname -i 2>/dev/null || echo ?)"
    printf '# uname -n = %s\n' "$(uname -n 2>/dev/null || echo ?)"
    printf '# uname -m = %s\n' "$(uname -m 2>/dev/null || echo ?)"
    printf '# uname -o = %s\n' "$(uname -o 2>/dev/null || echo ?)"
    printf '# uname -p = %s\n' "$(uname -p 2>/dev/null || echo ?)"
    printf '# uname -r = %s\n' "$(uname -r 2>/dev/null || echo ?)"
    printf '# uname -s = %s\n' "$(uname -s 2>/dev/null || echo ?)"
    printf '# uname -v = %s\n' "$(uname -v 2>/dev/null || echo ?)"
    echo
    printf '# PATH=%s\n' "$PATH"
    echo
    "${havecache}" && echo "#" cache available
    echo
} >&5

printf '/* %s: generated by configure */\n' "${configh##*/}" >&6

checking () {
    printf 'checking %s... ' "$1"
    printf '\nchecking %s...\n' "$1" >&5
    if [ $# -ge 2 ]
    then
	cachekey="$2"
    else
	unset cachekey
    fi
    unset cacheentry checkresult
}
getcache () {
    if ! "${havecache}" || [ x"${cachekey+set}" != x"set" ]
    then
	return 1
    fi
    if cacheentry="$(grep -F "${cachekey}	" "${configcache}")"
    then
	checkresult="${cacheentry#*	}"
	printf '(cached) '
	printf '# cache found: key=%s value=%s\n' \
	    "${cachekey}" "${checkresult}" >&5
    else
	unset cacheentry
	return 1
    fi
}
checkby () {
    printf '%% %s\n' "$*" >&5
    "$@" >&5 2>&1
    laststatus=$?
    if [ ${laststatus} -eq 0 ]
    then
	checkresult="yes"
    else
	printf '# exit status: %d\n' "${laststatus}" >&5
	checkresult="no"
	return ${laststatus}
    fi
}
trymake () {
    checkby ${cc} ${cflags} ${CADDS} ${ldflags} ${LDADDS} -o "${tempout}" \
	"${tempsrc}" "$@" ${ldlibs}
}
trycompile () {
    checkby ${cc} ${cflags} ${CADDS} -c -o "${tempo}" "${tempsrc}" "$@"
}
trylink () {
    checkby ${cc} ${ldflags} ${LDADDS} -o "${tempout}" "${tempo}" "$@" ${ldlibs}
}
tryexec () {
    checkby "${tempout}"
}
checked () {
    if [ $# -ge 1 ]
    then
	checkresult="$1"
    fi
    printf '%s\n' "${checkresult}"
    printf '# result: %s\n' "${checkresult}" >&5
    if [ x"${cachekey+set}" = x"set" ] && [ x"${cacheentry+set}" != x"set" ]
    then
	printf "%s\t%s\n" "${cachekey}" "${checkresult}" >&4
    fi
}
defconfigh () {
    printf '# defining %s=%s in %s\n' "$1" "${2-1}" "${configh}" >&5
    printf '#define %s %s\n' "$1" "${2-1}" >&6
}
fail () {
    echo "configuration failed" >&2
    exit 1
}


cc="${CC:-c99}"
cflags="${CFLAGS--O1 -g}"
ldflags="${LDFLAGS}"
ldlibs="${LDLIBS--lm}"
ar="${AR:-ar}"
arflags="${ARFLAGS--rc}"


# check OS type
checking 'operating system'
ostype=$(uname -s | tr "[:upper:]" "[:lower:]")
checked "${ostype}"
case "${ostype}" in
    darwin)
	defconfigh "_DARWIN_C_SOURCE"
	;;
esac


# check POSIX conformance
checking 'POSIX conformance'
posix=$(getconf _POSIX_VERSION 2>/dev/null)
if [ -n "${posix}" ] && [ x"${posix}" != x"undefined" ]
then
    checked "${posix}"
    defconfigh "_POSIX_C_SOURCE" "${posix}L"
    if [ "${posix}" -lt 200112 ]
    then
	posix=""
    fi
else
    checked "no"
    posix=""
fi

if [ -n "${posix}" ]
then
    checking 'SUS conformance'
    xopen=$(getconf _XOPEN_VERSION 2>/dev/null)
    if [ -n "${xopen}" ] && [ x"${xopen}" != x"undefined" ]
    then
	checked "${xopen}"
	defconfigh "_XOPEN_SOURCE" "${xopen}"
	if [ "${xopen}" -lt 600 ]
	then
	    xopen=""
	fi
    else
	checked "no"
	xopen=""
    fi
fi


# check if gcc is available if the debug option is enabled
if [ x"${debug}" = x"yes" ]
then
    if
	checking 'whether GCC is available'
	checkby eval "${CC:-gcc} --version | grep -i gcc"
    then
	checked "yes"
	gcc="yes" cc="${CC:-gcc}"
	cflags="-std=c99 -pedantic -MMD -Wall -Wextra -O1 -fno-inline -ggdb"
    else
	checked "no"
	echo "--debug option specified but GCC is not available" >&2
	fail
    fi
fi
if [ x"${debug}" = x"no" ]
then
    defconfigh "NDEBUG"
fi


# check if the compiler works
if
    checking 'whether the compiler works'
    cat >"${tempsrc}" <<END
#include "${configh}"
int main() { return 0; }
END
    trymake && tryexec
then
    checked "yes"
else
    checked "no"
    printf 'Compiler "%s" not found or not working.\n' "${cc}" >&2
    if [ x"${cc}" = x"c99" ]
    then
	echo "If you have gcc, try: ./configure CC='gcc -std=c99'" >&2
    fi
    fail
fi

# check if the compiler accepts the -O2 option if we are not debugging
if [ x"${debug}" = x"no" ]
then
    if
	checking 'whether the compiler accepts -O2 flag'
	savecflags=${cflags}
	cflags="-O2 -g"
	cat >"${tempsrc}" <<END
#include "${configh}"
int main() { return 0; }
END
	trycompile
    then
	checked "yes"
    else
	checked "no"
	cflags=${savecflags}
    fi
    unset savecflags
fi

# check if make supports include statements
checking 'whether make supports include statements'
if
    cat >"${tempsrc}" <<END
_TEST_:
	@echo >/dev/null
END
    checkby eval "${MAKE:-make} -f - _TEST_ <<END
include ${tempsrc}
END
"
then
    checked "yes"
    make_supports_include=true make_include='include'
else
    checked "no"
    make_supports_include=false make_include='# include'
fi


# check if terminfo is available
if [ x"${enable_lineedit}" = x"yes" ]
then
    checking 'for curses.h' curses.h
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#define _XOPEN_SOURCE_EXTENDED 1
#include <curses.h>
int main() { return 0; }
END
	trymake
    fi
    checked
    if [ x"${checkresult}" = x"yes" ]
    then
	defconfigh "HAVE_CURSES_H"
    fi

    checking 'for term.h' term.h
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#define _XOPEN_SOURCE_EXTENDED 1
#include <term.h>
int main() { return 0; }
END
	trymake
    fi
    checked
    if [ x"${checkresult}" = x"yes" ]
    then
	defconfigh "HAVE_TERM_H"
    fi

    checking 'for terminfo library' terminfo
    saveldlibs="${ldlibs}"
    if getcache
    then
	checked
    elif
	cat >"${tempsrc}" <<END
#include "${configh}"
#define _XOPEN_SOURCE_EXTENDED 1
#include <stdio.h>
#if HAVE_CURSES_H
#include <curses.h>
#else
#include <ncurses/curses.h>
#endif
#if HAVE_TERM_H
#include <term.h>
#else
#include <ncurses/term.h>
#endif
int main() {
setupterm((char*)0, 1, (int*)0);
tigetflag("");
tigetnum("");
tputs(tigetstr(""), 1, putchar);
del_curterm(cur_term);
}
END
	trymake
    then
	checked "yes"
    else
	for lib in tinfo curses ncurses
	do
	    ldlibs="${saveldlibs} -l${lib}"
	    if trymake
	    then
		checked "with -l${lib}"
		break
	    fi
	done
	if [ x"${checkresult}" = x"no" ]
	then
	    checked
	fi
    fi
    case "${checkresult}" in
    yes)
	ldlibs="${saveldlibs}"
	defconfigh "YASH_ENABLE_LINEEDIT"
	;;
    with*)
	ldlibs="${saveldlibs} ${checkresult#with }"
	defconfigh "YASH_ENABLE_LINEEDIT"
	;;
    no)
	echo "terminfo library unavailable: lineedit is disabled" >&2
	ldlibs="${saveldlibs}"
	enable_lineedit="no"
	;;
    esac
fi


# check whether system has /proc/self/exe or similar utility file
if
    checking 'for /proc/self/exe'
    [ -x /proc/self/exe ]
then
    checked "yes"
    defconfigh "HAVE_PROC_SELF_EXE"
elif
    checked "no"

    checking 'for /proc/curproc/file'
    [ -x /proc/curproc/file ]
then
    checked "yes"
    defconfigh "HAVE_PROC_CURPROC_FILE"
elif
    checked "no"

    checking 'for /proc/$$/object/a.out'
    [ -x /proc/$$/object/a.out ]
then
    checked "yes"
    defconfigh "HAVE_PROC_OBJECT_AOUT"
else
    checked "no"
fi


# check for strnlen
checking 'for strnlen' strnlen
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <string.h>
#ifndef strnlen
size_t strnlen(const char*, size_t);
#endif
int main() { return strnlen("12345", 3) != 3; }
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_STRNLEN"
fi

# check for wcsnlen
checking 'for wcsnlen' wcsnlen
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <wchar.h>
#ifndef wcsnlen
size_t wcsnlen(const wchar_t*, size_t);
#endif
int main() { return wcsnlen(L"12345", 3) != 3; }
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_WCSNLEN"
fi

# check for wcstold
checking 'for wcstold' wcstold
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <wchar.h>
#ifndef wcstold
long double wcstold(const wchar_t *restrict, wchar_t **restrict);
#endif
int main() { return wcstold(L"10.0", (const wchar_t *) 0) != 10.0; }
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_WCSTOLD"
fi

# check for wcwidth
checking 'for wcwidth' wcwidth
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <wchar.h>
int main() { return wcwidth(L'\0'); }
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_WCWIDTH"
fi

# check if sys/stat.h defines S_ISVTX
checking 'if <sys/stat.h> defines S_ISVTX' S_ISVTX
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/stat.h>
int main() { return S_ISVTX & 0; }
END
    trymake
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_S_ISVTX"
fi

# check if the "st_mtim"/"st_mtimespec"/"st_mtimensec" member of the "stat"
# structure is available
if
    checking 'for st_mtim' st_mtim
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/stat.h>
int main() {
struct stat st;
struct timespec ts = st.st_mtim;
return ts.tv_nsec != 0;
}
END
	trymake
    fi
    checked
    [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_ST_MTIM"
elif
    checking 'for st_mtimespec' st_mtimespec
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/stat.h>
int main() {
struct stat st;
struct timespec ts = st.st_mtimespec;
return ts.tv_nsec != 0;
}
END
	trymake
    fi
    checked
    [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_ST_MTIMESPEC"
elif
    checking 'for st_mtimensec' st_mtimensec
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/stat.h>
int main() {
struct stat st;
return st.st_mtimensec != 0;
}
END
	trymake
    fi
    checked
    [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_ST_MTIMENSEC"
fi

# check if WCONTINUED and WIFCONTINUED are available
checking 'for WCONTINUED and WIFCONTINUED' WCONTINUED
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <errno.h>
#include <sys/wait.h>
static int s;
int main() {
return waitpid(-1, &s, WNOHANG|WCONTINUED) < 0 && errno == EINVAL;
WIFCONTINUED(s);
}
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_WCONTINUED"
fi

# check for faccessat/eaccess
if
    checking 'for faccessat' faccessat
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <fcntl.h>
#include <unistd.h>
#ifndef faccessat
extern int faccessat(int, const char *, int, int);
#endif
int main() { faccessat(AT_FDCWD, ".", F_OK | R_OK | W_OK | X_OK, AT_EACCESS); }
END
	trymake
    fi
    checked
    [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_FACCESSAT"
elif
    checking 'for eaccess' eaccess
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <unistd.h>
#ifndef eaccess
extern int eaccess(const char *, int);
#endif
int main() { eaccess(".", F_OK | R_OK | W_OK | X_OK); }
END
	trymake
    fi
    checked
    [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_EACCESS"
fi

# check for strsignal
checking 'for strsingal' strsignal
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <signal.h>
#include <string.h>
#ifndef strsignal
char *strsignal(int);
#endif
int main() { (void) strsignal(SIGKILL); }
END
    trymake
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_STRSIGNAL"
fi

# check for paths.h
checking 'for paths.h' paths.h
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <paths.h>
#include <stdio.h>
int main() { printf("%s\n", _PATH_BSHELL); }
END
    trycompile
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "HAVE_PATHS_H"
fi

# check if getcwd accepts (NULL,0) as argument
checking "if getcwd(NULL,0) returns malloc'ed string" getcwd:automalloc
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
char *xgetcwd(void) {
    size_t pwdlen = 80;
    char *pwd = malloc(pwdlen);
    if (!pwd) return NULL;
    while (getcwd(pwd, pwdlen) == NULL) {
	if (errno == ERANGE) {
	    pwdlen *= 2;
	    pwd = realloc(pwd, pwdlen);
	    if (!pwd) return NULL;
	} else {
	    free(pwd);
	    return NULL;
	}
    }
    return pwd;
}
int main(void) {
    char *wd1 = getcwd(NULL, 0);
    if (!wd1) return 1;
    char *wd2 = xgetcwd();
    if (!wd2 || strcmp(wd1, wd2) != 0) return 1;
    char *wd11 = realloc(wd1, strlen(wd1) + 10);
    if (!wd11 || strcmp(wd11, wd2) != 0) return 1;
    free(wd11); free(wd2); return 0;
}
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"yes" ]
then
    defconfigh "GETCWD_AUTO_MALLOC"
fi

# check if ioctl supports TIOCGWINSZ
if [ x"${enable_lineedit}" = x"yes" ]; then
    checking 'if ioctl supports TIOCGWINSZ' TIOCGWINSZ
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/ioctl.h>
int main() {
    struct winsize ws;
    ioctl(0, TIOCGWINSZ, &ws);
    (void) ws.ws_row, (void) ws.ws_col;
}
END
	trymake
    fi
    checked
    if [ x"${checkresult}" = x"yes" ]
    then
	defconfigh "HAVE_TIOCGWINSZ"
    fi
fi

# check if wide-oriented I/O is working
checking 'if wide-oriented I/O is fully working' wideio:working
if ! getcache
then
    cat >"${tempsrc}" <<END
#include "${configh}"
#include <stdio.h>
#include <wchar.h>
#define LEN 12345
int main(void)
{
    FILE *f;
    fpos_t pos;
    f = fopen("${tempsrc}", "w+");
    if (f == NULL)                  return 1;
    if (fwprintf(f, L"123\n") != 4) return 2;
    if (fseek(f, 0, SEEK_SET) != 0) return 3;
    if (fgetwc(f) != L'1')          return 4;
    if (fgetwc(f) != L'2')          return 5;
    if (fgetpos(f, &pos) != 0)      return 6;
    if (fseek(f, 0, SEEK_SET) != 0) return 7;
    if (fgetwc(f) != L'1')          return 8;
    if (fsetpos(f, &pos) != 0)      return 9;
    if (fgetwc(f) != L'3')          return 10;
    if (fseek(f, 0, SEEK_SET) != 0) return 11;
    for (size_t i = 0; i < LEN; i++)
	if (fputwc(L'0', f) != L'0') return 12;
    if (fgetpos(f, &pos) != 0)      return 13;
    if (fputwc(L'1', f) != L'1')    return 14;
    if (fseek(f, 0, SEEK_SET) != 0) return 15;
    if (fgetwc(f) != L'0')          return 16;
    if (fsetpos(f, &pos) != 0)      return 17;
    if (fgetwc(f) != L'1')          return 18;
    if (fseek(f, 0, SEEK_SET) != 0) return 19;
    for (size_t i = 0; i < LEN; i++)
	if (fgetwc(f) != L'0')       return 20;
    if (fgetwc(f) != L'1')          return 21;
    if (fclose(f) != 0)             return 22;
    return 0;
}
END
    trymake && tryexec
fi
checked
if [ x"${checkresult}" = x"no" ]
then
    defconfigh "WIO_BROKEN"
fi

echo >&5

# enable/disable aliases
if [ x"$enable_alias" = x"yes" ]
then
    defconfigh "YASH_ENABLE_ALIAS"
    objs="$objs $alias_objs"
fi

# enable/disable the array builtin
if [ x"$enable_array" = x"yes" ]
then
    defconfigh "YASH_ENABLE_ARRAY"
fi

# enable/disable the directory stack
if [ x"$enable_dirstack" = x"yes" ]
then
    defconfigh "YASH_ENABLE_DIRSTACK"
fi

# enable/disable the help builtin
if [ x"$enable_help" = x"yes" ]
then
    defconfigh "YASH_ENABLE_HELP"
fi

# enable/disable history
if [ x"$enable_history" = x"yes" ]
then
    defconfigh "YASH_ENABLE_HISTORY"
    objs="$objs $history_objs"
else
    if [ x"$enable_lineedit" = x"yes" ]; then
	echo "Lineedit enabled but history disabled." >&2
	echo "Add --disable-lineedit option and try again." >&2
	fail
    fi
fi

# enable/disable the echo/printf builtins
if [ x"$enable_printf" = x"yes" ]
then
    defconfigh "YASH_ENABLE_PRINTF"
    builtin_objs="$builtin_objs $printf_objs"
fi

# enable/disable socket redirection
if [ x"$enable_socket" = x"yes" ]
then
    defconfigh "YASH_ENABLE_SOCKET"
fi

# enable/disable the test builtin
if [ x"$enable_test" = x"yes" ]
then
    defconfigh "YASH_ENABLE_TEST"
    builtin_objs="$builtin_objs $test_objs"
fi

# check for getrlimit and setrlimit
if [ x"$enable_ulimit" = x"yes" ]
then
    checking "for getrlimit and setrlimit" getrlimit_setrlimit
    if ! getcache
    then
	cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/resource.h>
int main() {
struct rlimit l;
(void) RLIM_SAVED_MAX;
(void) RLIM_SAVED_CUR;
(void) RLIM_INFINITY;
getrlimit(RLIMIT_FSIZE, &l);
setrlimit(RLIMIT_FSIZE, &l);
}
END
	trymake
    fi
    checked
    if [ x"${checkresult}" = x"yes" ]
    then
	defconfigh "YASH_ENABLE_ULIMIT"
	builtin_objs="$builtin_objs $ulimit_objs"
    else
	printf 'getrlimit/setrlimit unavailable: ' >&2
	printf 'the ulimit builtin is disabled\n' >&2
	enable_ulimit="no"
    fi
fi

# check for RLIMIT_***
if [ x"$enable_ulimit" = x"yes" ]
then
    for i in LOCKS MEMLOCK MSGQUEUE NICE NPROC RSS RTPRIO SIGPENDING
    do
	checking "for RLIMIT_${i}" "RLIMIT_${i}"
	if ! getcache
	then
	    cat >"${tempsrc}" <<END
#include "${configh}"
#include <sys/resource.h>
int main() { return RLIMIT_${i} == RLIMIT_AS; getrlimit(RLIMIT_${i}, 0); }
END
	    trymake && tryexec
	fi
	checked
	if [ x"${checkresult}" = x"yes" ]
	then
	    defconfigh "HAVE_RLIMIT_${i}"
	fi
    done
fi


# check if ctags/etags accepts the --recurse option
checking "if ctags accepts --recurse option"
checkby ctags --recurse -f /dev/null /dev/null
checked
if [ x"${checkresult}" = x"yes" ]
then
    ctags_args='--recurse'
else
    ctags_args='*.[ch]'
fi
checking "if etags accepts --recurse option"
checkby etags --recurse -o /dev/null /dev/null >/dev/null 2>&1
checked
if [ x"${checkresult}" = x"yes" ]
then
    etags_args='--recurse'
else
    etags_args='*.[ch]'
fi


if [ -n "${builtin_objs}" ]
then
    objs="${objs} builtins/${builtins_archive}"
fi
if [ x"${enable_lineedit}" = x"yes" ]
then
    objs="${objs} lineedit/${lineedit_archive}"
fi

cflags="${cflags} -D HAVE_CONFIG_H"

# create dependency files if there are none
for f in ${depfiles}
do
    >>${f}
done

MAKE_INCLUDE="${MAKE_INCLUDE-${make_include}}"
CC="${CC-${cc}}"
CFLAGS="${CFLAGS-${cflags}} ${CADDS}"
LDFLAGS="${LDFLAGS-${ldflags}} ${LDADDS}"
LDLIBS="${LDLIBS-${ldlibs}}"
AR="${AR-${ar}}"
ARFLAGS="${ARFLAGS-${arflags}}"
CTAGSARGS="${ctags_args}"
ETAGSARGS="${etags_args}"
DIRS="${dirs}"
OBJS="${objs}"
BUILTIN_OBJS="${builtin_objs}"
BUILTINS_ARCHIVE="${builtins_archive}"
LINEEDIT_ARCHIVE="${lineedit_archive}"
PACKAGE="${package}"
TARGET="${target}"
VERSION="${version}"
INSTALL_PROGRAM="${INSTALL_PROGRAM-./install-sh}"
PREFIX="${prefix-/usr/local}"
EPREFIX="${eprefix-${PREFIX}}"
if [ x"${PREFIX}" = x"/" ]; then PREFIX=""; fi
if [ x"${EPREFIX}" = x"/" ]; then EPREFIX=""; fi
BINDIR="${bindir-${EPREFIX}/bin}"
DATAROOTDIR="${datarootdir-${PREFIX}/share}"
if [ x"${DATAROOTDIR}" = x"/" ]; then DATAROOTDIR=""; fi
DOCDIR="${docdir-${DATAROOTDIR}/doc/yash}"
HTMLDIR="${htmldir-${DOCDIR}}"
DISTDIR=$(echo $PACKAGE $VERSION | sed -e 's/[[:space:]]/-/g')

# create Makefile($1) from Makefile.in($2) in directory $3
makemakefile () {
    printf "creating %s... " "$1"
    sed -e "1i\\
# ${1##*/}: generated by configure" -f "${temptxt}" "$2" >"$1"
    if ! $make_supports_include && ls "$3"/*.d >/dev/null 2>&1
    then
	printf "(including dependencies) "
	echo >>"$1"
	cat "$3"/*.d >>"$1"
    fi
    echo "done"
}
cat >"${temptxt}" <<END
s!@MAKE_INCLUDE@!${MAKE_INCLUDE}!g
s!@CC@!${CC}!g
s!@CFLAGS@!${CFLAGS}!g
s!@LDFLAGS@!${LDFLAGS}!g
s!@LDLIBS@!${LDLIBS}!g
s!@AR@!${AR}!g
s!@ARFLAGS@!${ARFLAGS}!g
s!@CTAGSARGS@!${CTAGSARGS}!g
s!@ETAGSARGS@!${ETAGSARGS}!g
s!@DIRS@!${DIRS}!g
s!@OBJS@!${OBJS}!g
s!@BUILTIN_OBJS@!${BUILTIN_OBJS}!g
s!@BUILTINS_ARCHIVE@!${BUILTINS_ARCHIVE}!g
s!@LINEEDIT_ARCHIVE@!${LINEEDIT_ARCHIVE}!g
s!@PACKAGE@!${PACKAGE}!g
s!@TARGET@!${TARGET}!g
s!@VERSION@!${VERSION}!g
s!@INSTALL_PROGRAM@!${INSTALL_PROGRAM}!g
s!@PREFIX@!${PREFIX}!g
s!@EPREFIX@!${EPREFIX}!g
s!@BINDIR@!${BINDIR}!g
s!@DATAROOTDIR@!${DATAROOTDIR}!g
s!@DOCDIR@!${DOCDIR}!g
s!@HTMLDIR@!${HTMLDIR}!g
s!@DISTDIR@!${DISTDIR}!g
END
for d in ${dirs}
do
    makemakefile "${d}/${makefile}" "${d}/${makefilein}" "${d}"
done

{
    echo
    echo "===== Output variables ====="
    echo MAKE_INCLUDE="'${MAKE_INCLUDE}'"
    echo CC="'${CC}'"
    echo CFLAGS="'${CFLAGS}'"
    echo LDFLAGS="'${LDFLAGS}'"
    echo LDLIBS="'${LDLIBS}'"
    echo AR="'${AR}'"
    echo ARFLAGS="'${ARFLAGS}'"
    echo CTAGSARGS="'${CTAGSARGS}'"
    echo ETAGSARGS="'${ETAGSARGS}'"
    echo DIRS="'${DIRS}'"
    echo OBJS="'${OBJS}'"
    echo BUILTIN_OBJS="'${BUILTIN_OBJS}'"
    echo BUILTINS_ARCHIVE="'${BUILTINS_ARCHIVE}'"
    echo LINEEDIT_ARCHIVE="'${LINEEDIT_ARCHIVE}'"
    echo PACKAGE="'${PACKAGE}'"
    echo TARGET="'${TARGET}'"
    echo VERSION="'${VERSION}'"
    echo INSTALL_PROGRAM="'${INSTALL_PROGRAM}'"
    echo PREFIX="'${PREFIX}'"
    echo EPREFIX="'${EPREFIX}'"
    echo BINDIR="'${BINDIR}'"
    echo DATAROOTDIR="'${DATAROOTDIR}'"
    echo DOCDIR="'${DOCDIR}'"
    echo HTMLDIR="'${HTMLDIR}'"
    echo DISTDIR="'${DISTDIR}'"
} >&5


# create version.h
printf "creating %s... " "${versionh}"
cat >"${versionh}" <<END
/* ${versionh##*/}: generated by configure */
#ifndef YASH_VERSION_H
#define YASH_VERSION_H
#define PACKAGE_NAME "${PACKAGE}"
#define PACKAGE_STRING "${PACKAGE} ${VERSION}"
#define PACKAGE_VERSION "${VERSION}"
#define PACKAGE_COPYRIGHT "Copyright (C) ${copyrightyear} magicant"
#endif
END
echo "done"


echo "configuration complete"


# print warning if POSIX conformance is missing
if [ -z "${posix}" ]; then
    echo "WARNING: yash is designed for systems that conform to POSIX.1-2001"
    echo "         but your system does not"
fi


# vim: set ft=sh ts=8 sts=4 sw=4 noet tw=80:
