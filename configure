#!/bin/sh

# Manually written configuration script for yash
# Â© 2007-2008 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

makefile="Makefile"
makefilein="Makefile.in"
configlog="config.log"
configh="config.h"
versionh="version.h"
tempsrc=".temp.c"
tempout=".temp.out"

cc="${CC-c99}"
cflags="${CFLAGS--O1 -g}"
ldflags="${LDFLAGS}"
ldlibs="${LDLIBS--l c}"
target="yash"
package="yash"
version="2.0 WIP"
copyrightyear="2007-2008"

sources="common.h exec.c exec.h hashtable.c hashtable.h job.c job.h lineinput.c lineinput.h parser.c parser.h plist.c plist.h redir.c redir.h sig.c sig.h strbuf.c strbuf.h util.c util.h yash.h yash.c" 
objs="util.o strbuf.o plist.o hashtable.o lineinput.o parser.o sig.o redir.o job.o exec.o yash.o"

help="no"
gcc=""
debug="no"
readline="check"
rlldflagcand="termcap tinfo curses ncurses"
unset prefix eprefix bindir

# parse options
for i in "$@"
do
	case "$i" in
		-h|--help)
			help="yes" ;;
		-d|--debug)
			debug="yes" ;;
		--without-readline)
			readline="no" ;;
		--with-readline=*)
			readline="${i#--with-readline=}" ;;
		--with-readline)
			readline="yes" ;;
		--prefix=*)
			prefix="${i#--prefix=}" ;;
		--exec-prefix=*)
			execprefix="${i#--exec-prefix=}" ;;
		--bindir=*)
			bindir="${i#--bindir=}" ;;
		*)
		echo "$0: $i: unknown option" >&2
		exit 1
	esac
done

if [ x"${help}" = x"yes" ]
then
	cat <<END
Usage: ./configure [options...]

Available options:
  --debug                configure for debug build (requires GCC)
  --with-readline        turn on command line editing (requires GNU Readline)
  --without-readline     turn off command line editing

Installation options:
  --prefix=PREFIX        install architecture-independent files in PREFIX
                         [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [PREFIX]
  --bindir=DIR           install executable in DIR [EPREFIX/bin]

Influential environment variables:
  CC, CFLAGS, CADDS, LDFLAGS, LDADDS, LDLIBS, INSTALL_PROGRAM
END
	exit 0
fi


exec 5>"${configlog}"
exec 6>"${configh}"

echo "===== Configuration log: generated by configure =====" >&5
echo >&5
date >&5
echo >&5
echo "# Invocation command line was:" >&5
echo "%" "$0" "$@" >&5
echo >&5
echo "#" uname -n = `uname -n` >&5
echo "#" uname -m = `uname -m` >&5
echo "#" uname -r = `uname -r` >&5
echo "#" uname -s = `uname -s` >&5
echo "#" uname -v = `uname -v` >&5
echo >&5
echo "#" PATH="${PATH}" >&5
echo >&5
echo >&5

echo "/* ${configh}: generated by configure */" >&6

checking () {
	printf "%s" "checking $1... "
	echo >&5
	echo "# checking $1..." >&5
}
checkby () {
	echo "%" "$@" >&5
	eval "$@" '>&5 2>&1'
}
trycompile () {
	echo "%" ${cc} ${cflags} ${CADDS} ${ldflags} ${LDADDS} -o "${tempout}" \
		"${tempsrc}" "$@" ${ldlibs} >&5
	${cc} ${cflags} ${CADDS} ${ldflags} ${LDADDS} -o "${tempout}" \
		"${tempsrc}" "$@" ${ldlibs} >&5 2>&1
}
checked () {
	echo "$1"
	echo "# result: $1" >&5
}
defconfigh () {
	echo "#define" $1 ${2:-1} >&6
	echo "# defining $1=${2:-1} in ${configh}" >&5
}

# check whether GCC is available
checking "whether GCC is available"
if checkby "${CC:-gcc} --version | grep -i gcc"
then gcc="yes"
else gcc="no"
fi
checked "${gcc}"

if [ x"${gcc}" = x"yes" ]
then
	cc="${CC:-gcc}"
	if [ x"${debug}" = x"yes" ]
	then
		cflags="-std=c99 -O1 -ggdb -Wall -Wextra"
	else
		cflags="-std=c99 -O2 -g"
		defconfigh "NDEBUG"
	fi
else
	if [ x"${debug}" = x"yes" ]
	then
		echo "--debug option specified but GCC unavailable" 2>&1
		debug="no"
	fi
	defconfigh "NDEBUG"
fi

# check whether GNU Readline is available
if [ x"${readline}" = x"check" -o x"${readline}" = x"yes" ]
then
	if [ x"${readline}" = x"yes" ]
	then
		defconfigh "USE_READLINE"
	fi
	checking "whether GNU Readline is available"
	cat >"${tempsrc}" <<END
#include <stdio.h>
#include <readline/readline.h>
/* check some features to exclude old libedit */
char *(*x)() = rl_filename_completion_function;
void *y = &rl_attempted_completion_over;
int main() { readline(""); return 0; }
END
	if [ -r libreadline.a ]
	then
		rllib="libreadline.a"
	else
		rllib="-l readline"
	fi
	if trycompile ${rllib}
	then
		checked "yes"
		ldlibs="${rllib} ${ldlibs}"
		readline="ok"
	else
		for i in ${rlldflagcand}
		do
			if trycompile ${rllib} -l $i
			then
				checked "with $i library"
				ldlibs="${rllib} -l $i ${ldlibs}"
				readline="ok"
				break
			fi
		done
	fi
	if [ x"${readline}" = x"ok" ]
	then
		defconfigh "HAVE_LIBREADLINE"
	else
		checked "no"
		readline="no"
	fi
fi

# check for strnlen
checking "for strnlen"
cat >"${tempsrc}" <<END
#include <stddef.h>
size_t strnlen(const char*, size_t);
int main() { return (int) strnlen("", 1); }
END
if trycompile
then
	checked "yes"
	defconfigh "HAVE_STRNLEN"
else
	checked "no"
fi

# check for wcsnlen
checking "for wcsnlen"
cat >"${tempsrc}" <<END
#include <stddef.h>
size_t wcsnlen(const wchar_t*, size_t);
int main() { return (int) wcsnlen(L"", 1); }
END
if trycompile
then
	checked "yes"
	defconfigh "HAVE_WCSNLEN"
else
	checked "no"
fi

# check for mkstemp
checking "for mkstemp"
cat >"${tempsrc}" <<END
#define _POSIX_C_SOURCE 200112
#define _XOPEN_SOURCE   600
#include <stdlib.h>
int main() { return mkstemp((char []) { "" }); }
END
if trycompile
then
	checked "yes"
	defconfigh "HAVE_MKSTEMP"
else
	checked "no"
fi

# check for strsignal
checking "for strsingal"
cat >"${tempsrc}" <<END
#define _POSIX_C_SOURCE 200112
#include <stdio.h>
#include <signal.h>
extern char *strsignal(int);
int main() { printf("%s\n", strsignal(SIGKILL)); return 0; }
END
if trycompile
then
	checked "yes"
	defconfigh "HAVE_STRSIGNAL"
else
	checked "no"
fi


cflags="${cflags} -D HAVE_CONFIG_H"

CC="${CC-${cc}}"
CFLAGS="${CFLAGS-${cflags}} ${CADDS}"
LDFLAGS="${LDFLAGS-${ldflags}} ${LDADDS}"
LDLIBS="${LDLIBS-${ldlibs}}"
SOURCES="${sources}"
OBJS="${objs}"
PACKAGE="${package}"
TARGET="${target}"
VERSION="${version}"
INSTALL_PROGRAM="${INSTALL_PROGRAM-sh ./install-sh}"
PREFIX="${prefix-/usr/local}"
EPREFIX="${eprefix-${PREFIX}}"
if [ x"${PREFIX}" = x"/" ]; then PREFIX=""; fi
if [ x"${EPREFIX}" = x"/" ]; then EPREFIX=""; fi
BINDIR="${bindir-${EPREFIX}/bin}"
DISTDIR=`echo $PACKAGE $VERSION | sed -e 's/[[:space:]]/-/g'`

# create Makefile from Makefile.in
echo "creating ${makefile}"
echo "# ${makefile}: generated by configure" > "${makefile}"
sed -e "
    s!@CC@!${CC}!g
    s!@CFLAGS@!${CFLAGS}!g
    s!@LDFLAGS@!${LDFLAGS}!g
    s!@LDLIBS@!${LDLIBS}!g
    s!@SOURCES@!${SOURCES}!g
    s!@OBJS@!${OBJS}!g
    s!@PACKAGE@!${PACKAGE}!g
    s!@TARGET@!${TARGET}!g
    s!@VERSION@!${VERSION}!g
    s!@INSTALL_PROGRAM@!${INSTALL_PROGRAM}!g
    s!@PREFIX@!${PREFIX}!g
    s!@EPREFIX@!${EPREFIX}!g
    s!@BINDIR@!${BINDIR}!g
    s!@DISTDIR@!${DISTDIR}!g
    " "${makefilein}" >> "${makefile}"
sh ./makedepend ${sources} >> "${makefile}"

echo >&5
echo "===== Output variables =====" >&5
echo CC="'${CC}'" >&5
echo CFLAGS="'${CFLAGS}'" >&5
echo LDFLAGS="'${LDFLAGS}'" >&5
echo LDLIBS="'${LDLIBS}'" >&5
echo SOURCES="'${SOURCES}'" >&5
echo OBJS="'${OBJS}'" >&5
echo PACKAGE="'${PACKAGE}'" >&5
echo TARGET="'${TARGET}'" >&5
echo VERSION="'${VERSION}'" >&5
echo INSTALL_PROGRAM="'${INSTALL_PROGRAM}'" >&5
echo PREFIX="'${PREFIX}'" >&5
echo EPREFIX="'${EPREFIX}'" >&5
echo BINDIR="'${BINDIR}'" >&5
echo DISTDIR="'${DISTDIR}'" >&5


# create version.h
echo "creating ${versionh}"
cat >"${versionh}" <<END
/* ${versionh}: generated by configure */
#define PACKAGE_NAME "${PACKAGE}"
#define PACKAGE_STRING "${PACKAGE} ${VERSION}"
#define PACKAGE_VERSION "${VERSION}"
#define PACKAGE_COPYRIGHT "Copyright (C) ${copyrightyear} magicant"
END


rm -f "${tempsrc}" "${tempout}"
