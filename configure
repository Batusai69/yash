#!/bin/sh

# Manually written configuration script for yash
# (C) 2007-2008 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

makefile="Makefile"
makefilein="Makefile.in"
configlog="config.log"
configh="config.h"
versionh="version.h"
tempsrc=".temp.c"
tempo=".temp.o"
tempout="./.temp.out"

cc="${CC-c99}"
cflags="${CFLAGS--O1 -g}"
ldflags="${LDFLAGS}"
ldlibs="${LDLIBS}"
target="yash"
package="yash"
version="2.0a2"
copyrightyear="2007-2008"

sources="alias.c alias.h builtin.c builtin.h common.h exec.c exec.h expand.c expand.h hashtable.c hashtable.h job.c job.h input.c input.h option.c option.h parser.c parser.h path.c path.h plist.c plist.h redir.c redir.h sig.c sig.h strbuf.c strbuf.h util.c util.h variable.c variable.h wfnmatch.c wfnmatch.h yash.h yash.c" 
objs="option.o util.o strbuf.o plist.o hashtable.o wfnmatch.o path.o input.o alias.o parser.o variable.o sig.o expand.o redir.o job.o builtin.o exec.o yash.o"

help="no"
gcc=""
debug="no"
noundef="no"
unset prefix eprefix bindir

# parse options
for i in "$@"
do
    case "$i" in
	-h|--help)
	    help="yes" ;;
	-d|--debug)
	    debug="yes" ;;
	--no-undefined)
	    noundef="yes" ;;
	--prefix=*)
	    prefix="${i#--prefix=}" ;;
	--exec-prefix=*)
	    execprefix="${i#--exec-prefix=}" ;;
	--bindir=*)
	    bindir="${i#--bindir=}" ;;
	*)
	echo "$0: $i: unknown option" >&2
	exit 1
    esac
done

if [ x"${help}" = x"yes" ]
then
    cat <<END
Usage: ./configure [options...]

Available options:
  --debug                configure for debug build (GCC required)
  --no-undefined         inhibit any undefined operation

Installation options:
  --prefix=PREFIX        install architecture-independent files in PREFIX
                         [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [PREFIX]
  --bindir=DIR           install executable in DIR [EPREFIX/bin]

Influential environment variables:
  CC, CFLAGS, CADDS, LDFLAGS, LDADDS, LDLIBS, INSTALL_PROGRAM
END
    exit 0
fi


trap 'rm -f "${tempsrc}" "${tempo}" "${tempout}"' EXIT

exec 5>"${configlog}"
exec 6>"${configh}"

echo "===== Configuration log: generated by configure =====" >&5
echo >&5
date >&5
echo >&5
echo "# Invocation command line was:" >&5
echo "%" "$0" "$@" >&5
echo >&5
echo "#" uname -n = `uname -n` >&5
echo "#" uname -m = `uname -m` >&5
echo "#" uname -r = `uname -r` >&5
echo "#" uname -s = `uname -s` >&5
echo "#" uname -v = `uname -v` >&5
echo >&5
echo "#" PATH="${PATH}" >&5
echo >&5
echo >&5

echo "/* ${configh}: generated by configure */" >&6

checking () {
    printf "%s" "checking $1... "
    echo >&5
    echo "# checking $1..." >&5
}
checkby () {
    echo "%" "$@" >&5
    eval "$@" '>&5 2>&1'
}
trymake () {
    echo "%" ${cc} ${cflags} ${CADDS} ${ldflags} ${LDADDS} -o "${tempout}" \
	"${tempsrc}" "$@" ${ldlibs} >&5
    ${cc} ${cflags} ${CADDS} ${ldflags} ${LDADDS} -o "${tempout}" \
	"${tempsrc}" "$@" ${ldlibs} >&5 2>&1
}
trycompile () {
    echo "%" ${cc} ${cflags} ${CADDS} -c -o "${tempo}" "${tempsrc}" "$@" >&5
    ${cc} ${cflags} ${CADDS} -c -o "${tempo}" "${tempsrc}" "$@" >&5 2>&1
}
trylink () {
    echo "%" ${cc} ${ldflags} ${LDADDS} -o "${tempout}" \
	"${tempo}" "$@" ${ldlibs} >&5
    ${cc} ${ldflags} ${LDADDS} -o "${tempout}" \
	"${tempo}" "$@" ${ldlibs} >&5 2>&1
}
tryexec () {
    checkby "${tempout}"
}
checked () {
    echo "$1"
    echo "# result: $1" >&5
}
defconfigh () {
    echo "#define" $1 ${2-1} >&6
    echo "# defining $1='${2-1}' in ${configh}" >&5
}

# check whether GCC is available
checking "whether GCC is available"
if checkby "${CC:-gcc} --version | grep -i gcc"
then gcc="yes"
else gcc="no"
fi
checked "${gcc}"

if [ x"${gcc}" = x"yes" ]
then
    cc="${CC:-gcc}"
    if [ x"${debug}" = x"yes" ]
    then
	cflags="-std=c99 -O1 -ggdb -Wall -Wextra"
    else
	cflags="-std=c99 -O2 -g"
	defconfigh "NDEBUG"
    fi
else
    if [ x"${debug}" = x"yes" ]
    then
	echo "--debug option specified but GCC unavailable" 2>&1
	debug="no"
    fi
    defconfigh "NDEBUG"
fi

# check whether system has /proc file system
checking "whether system has /proc file system"
if [ -x /proc/self/exe ]
then
    checked "yes"
    defconfigh "HAVE_PROC_FILESYSTEM"
else
    checked "no"
fi

# check for strnlen
checking "for strnlen"
cat >"${tempsrc}" <<END
#include <stddef.h>
size_t strnlen(const char*, size_t);
int main() { return (int) strnlen("", 1); }
END
if trymake
then
    checked "yes"
    defconfigh "HAVE_STRNLEN"
else
    checked "no"
fi

# check for wcsnlen
checking "for wcsnlen"
cat >"${tempsrc}" <<END
#include <stddef.h>
size_t wcsnlen(const wchar_t*, size_t);
int main() { return (int) wcsnlen(L"", 1); }
END
if trymake
then
    checked "yes"
    defconfigh "HAVE_WCSNLEN"
else
    checked "no"
fi

# check for mkstemp
checking "for mkstemp"
cat >"${tempsrc}" <<END
#define _POSIX_C_SOURCE 200112
#define _XOPEN_SOURCE   600
#include <stdlib.h>
int main() { return mkstemp((char []) { "" }); }
END
if trymake
then
    checked "yes"
    defconfigh "HAVE_MKSTEMP"
else
    checked "no"
fi

# check for strsignal
checking "for strsingal"
cat >"${tempsrc}" <<END
#define _POSIX_C_SOURCE 200112
#include <stdio.h>
#include <signal.h>
extern char *strsignal(int);
int main() { printf("%s\n", strsignal(SIGKILL)); }
END
if trymake
then
    checked "yes"
    defconfigh "HAVE_STRSIGNAL"
else
    checked "no"
fi

# check for paths.h
checking "for paths.h"
cat >"${tempsrc}" <<END
#include <paths.h>
#include <stdio.h>
int main() { printf("%s\n", _PATH_BSHELL); }
END
if trycompile
then
    checked "yes"
    defconfigh "HAVE_PATHS_H"
else
    checked "no"
fi

# check if getcwd accepts (NULL,0) as argument
if [ x"${noundef}" = x"no" ]; then
    checking "if getcwd(NULL,0) returns malloc'ed string"
    cat >"${tempsrc}" <<END
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
char *xgetcwd(void) {
    size_t pwdlen = 40;
    char *pwd = malloc(pwdlen);
    if (!pwd) return NULL;
    while (getcwd(pwd, pwdlen) == NULL) {
	if (errno == ERANGE) {
	    pwdlen *= 2;
	    pwd = realloc(pwd, pwdlen);
	    if (!pwd) return NULL;
	} else {
	    free(pwd);
	    return NULL;
	}
    }
    return pwd;
}
int main(void) {
    char *wd1 = getcwd(NULL, 0);
    if (!wd1) return 1;
    char *wd2 = xgetcwd();
    if (!wd2 || strcmp(wd1, wd2) != 0) return 1;
    char *wd11 = realloc(wd1, strlen(wd1) + 10);
    if (!wd11 || strcmp(wd11, wd2) != 0) return 1;
    free(wd11);
}
END
    if trymake && tryexec
    then
	checked "yes"
	defconfigh "GETCWD_AUTO_MALLOC"
    else
	checked "no"
    fi
fi

# define ARITH_OVERFLOW_CHECK
if [ x"${noundef}" = x"yes" ]; then
    echo >&5
    defconfigh ARITH_OVERFLOW_CHECK
fi


cflags="${cflags} -D HAVE_CONFIG_H"

CC="${CC-${cc}}"
CFLAGS="${CFLAGS-${cflags}} ${CADDS}"
LDFLAGS="${LDFLAGS-${ldflags}} ${LDADDS}"
LDLIBS="${LDLIBS-${ldlibs}}"
SOURCES="${sources}"
OBJS="${objs}"
PACKAGE="${package}"
TARGET="${target}"
VERSION="${version}"
INSTALL_PROGRAM="${INSTALL_PROGRAM-sh ./install-sh}"
PREFIX="${prefix-/usr/local}"
EPREFIX="${eprefix-${PREFIX}}"
if [ x"${PREFIX}" = x"/" ]; then PREFIX=""; fi
if [ x"${EPREFIX}" = x"/" ]; then EPREFIX=""; fi
BINDIR="${bindir-${EPREFIX}/bin}"
DISTDIR=`echo $PACKAGE $VERSION | sed -e 's/[[:space:]]/-/g'`

# create Makefile from Makefile.in
echo "creating ${makefile}"
echo "# ${makefile}: generated by configure" > "${makefile}"
sed -e "
    s!@CC@!${CC}!g
    s!@CFLAGS@!${CFLAGS}!g
    s!@LDFLAGS@!${LDFLAGS}!g
    s!@LDLIBS@!${LDLIBS}!g
    s!@SOURCES@!${SOURCES}!g
    s!@OBJS@!${OBJS}!g
    s!@PACKAGE@!${PACKAGE}!g
    s!@TARGET@!${TARGET}!g
    s!@VERSION@!${VERSION}!g
    s!@INSTALL_PROGRAM@!${INSTALL_PROGRAM}!g
    s!@PREFIX@!${PREFIX}!g
    s!@EPREFIX@!${EPREFIX}!g
    s!@BINDIR@!${BINDIR}!g
    s!@DISTDIR@!${DISTDIR}!g
    " "${makefilein}" >> "${makefile}"
sh ./makedepend ${sources} >> "${makefile}"

echo >&5
echo "===== Output variables =====" >&5
echo CC="'${CC}'" >&5
echo CFLAGS="'${CFLAGS}'" >&5
echo LDFLAGS="'${LDFLAGS}'" >&5
echo LDLIBS="'${LDLIBS}'" >&5
echo SOURCES="'${SOURCES}'" >&5
echo OBJS="'${OBJS}'" >&5
echo PACKAGE="'${PACKAGE}'" >&5
echo TARGET="'${TARGET}'" >&5
echo VERSION="'${VERSION}'" >&5
echo INSTALL_PROGRAM="'${INSTALL_PROGRAM}'" >&5
echo PREFIX="'${PREFIX}'" >&5
echo EPREFIX="'${EPREFIX}'" >&5
echo BINDIR="'${BINDIR}'" >&5
echo DISTDIR="'${DISTDIR}'" >&5


# create version.h
echo "creating ${versionh}"
cat >"${versionh}" <<END
/* ${versionh}: generated by configure */
#ifndef VERSION_H
#define VERSION_H
#define PACKAGE_NAME "${PACKAGE}"
#define PACKAGE_STRING "${PACKAGE} ${VERSION}"
#define PACKAGE_VERSION "${VERSION}"
#define PACKAGE_COPYRIGHT "Copyright (C) ${copyrightyear} magicant"
#endif
END


# vim: set ts=8 sts=4 sw=4 noet:
