#!/bin/sh

# Manually written configuration script for yash
# Â© 2007-2008 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

makefile="Makefile"
makefilein="Makefile.in"
configlog="config.log"
configh="config.h"
versionh="version.h"
tempsrc=".temp.c"
tempout=".temp.o"

cc="c99"
cflags="-O1 -g"
ldflags="-lc"
target="yash"
package="yash"
version="1.2"
copyrightyear="2007-2008"

help="no"
gcc=""
debug="no"
readline="check"
rlldflagcand="-ltermcap -ltinfo -lcurses -lncurses"
unset prefix eprefix bindir

# parse options
for i in "$@"
do
	case "$i" in
		-h|--help)
			help="yes" ;;
		-d|--debug)
			debug="yes" ;;
		--without-readline)
			readline="no" ;;
		--with-readline=*)
			readline="${i#--with-readline=}" ;;
		--with-readline)
			readline="yes" ;;
		--prefix=*)
			prefix="${i#--prefix=}" ;;
		--exec-prefix=*)
			execprefix="${i#--exec-prefix=}" ;;
		--bindir=*)
			bindir="${i#--bindir=}" ;;
		*)
		echo "$0: $i: unknown option" >&2
		exit 1
	esac
done

if [ x"${help}" = x"yes" ]
then
	cat <<END
Usage: ./configure [options...]

Available options:
  --debug                configure for debug build (requires GCC)
  --with-readline        turn on command line editing (requires GNU Readline)
  --without-readline     turn off command line editing

Installation options:
  --prefix=PREFIX        install architecture-independent files in PREFIX
                         [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [PREFIX]
  --bindir=DIR           install executable in DIR [EPREFIX/bin]

Influential environment variables:
  CC, CFLAGS, CADDS, LDFLAGS, LDADDS, LIBS, INSTALL_PROGRAM
END
	exit 0
fi


exec 5>"${configlog}"
exec 6>"${configh}"

echo "===== Configuration log: generated by configure =====" >&5
echo >&5
date >&5
echo >&5
echo "# Invocation command line was:" >&5
echo "%" "$0" "$@" >&5
echo >&5
echo "#" uname -n = `uname -n` >&5
echo "#" uname -m = `uname -m` >&5
echo "#" uname -r = `uname -r` >&5
echo "#" uname -s = `uname -s` >&5
echo "#" uname -v = `uname -v` >&5
echo >&5
echo "#" PATH="${PATH}" >&5
echo >&5
echo >&5

echo "/* ${configh}: generated by configure */" >&6

checking () {
	printf "%s" "checking $1... "
	echo >&5
	echo "# checking $1:" >&5
}
checkby () {
	echo "%" "$@" >&5
	"$@" >&5 2>&1
}
trycompile () {
	echo "%" ${cc} ${cflags} ${ldflags} "$@" -o "${tempout}" "${tempsrc}" >&5
	${cc} ${cflags} ${ldflags} "$@" -o "${tempout}" "${tempsrc}" >&5 2>&1 ||
	(rm -f "${tempout}"; exit 1) &&
	(rm -f "${tempout}"; exit 0)
}
checked () {
	echo "$1"
	echo "# result: $1" >&5
}
defconfigh () {
	echo "#define" $1 ${2:-1} >&6
	echo "# defining $1=${2:-1} in ${configh}" >&5
}

# check whether GCC is available
checking "whether GCC is available"
if checkby gcc --version
then gcc="yes"
else gcc="no"
fi
checked ${gcc}

if [ x"${gcc}" = x"yes" ]
then
	cc="gcc"
	if [ x"${debug}" = x"yes" ]
	then
		cflags="-std=c99 -O1 -ggdb -Wall -Wextra"
	else
		cflags="-std=c99 -O2 -g"
		defconfigh "NDEBUG"
	fi
	defconfigh "_GNU_SOURCE"
else
	if [ x"${debug}" = x"yes" ]
	then
		echo "--debug option specified but GCC unavailable" 2>&1
		debug="no"
	fi
	defconfigh "NDEBUG"
fi

# check whether GNU Readline is available
if [ x"${readline}" = x"check" -o x"${readline}" = x"yes" ]
then
	if [ x"${readline}" = x"yes" ]
	then
		defconfigh "USE_READLINE"
	fi
	checking "whether GNU Readline is available"
	cat >"${tempsrc}" <<END
#include <stdio.h>
#include <readline/readline.h>
int main() { readline(""); return 0; }
END
	if trycompile -lreadline
	then
		checked "yes"
		ldflags="${ldflags} -lreadline"
		readline="ok"
	else
		for i in ${rlldflagcand}
		do
			if trycompile $i -lreadline
			then
				checked "with $i"
				ldflags="${ldflags} $i -lreadline"
				readline="ok"
				break
			fi
		done
	fi
	if [ x"${readline}" = x"ok" ]
	then
		defconfigh "HAVE_LIBREADLINE"
	else
		checked "no"
		readline="no"
	fi
fi

# check for strsignal
checking "for strsingal"
cat >"${tempsrc}" <<END
#define _GNU_SOURCE
#include <stdio.h>
#include <string.h>
#include <signal.h>
int main() { printf("%s\n", strsignal(SIGKILL)); return 0; }
END
if trycompile
then
	checked "yes"
	defconfigh "HAVE_STRSIGNAL"
else
	checked "no"
fi


cflags="${cflags} -D HAVE_CONFIG_H"

TARGET="${target}"
CC="${CC-${cc}}"
CFLAGS="${CFLAGS-${cflags}} ${CADDS}"
LDFLAGS="${LDFLAGS-${ldflags}} ${LDADDS} ${LIBS}"
PACKAGE="${package}"
VERSION="${version}"
INSTALL_PROGRAM="${INSTALL_PROGRAM-sh ./install-sh}"
PREFIX="${prefix-/usr/local}"
EPREFIX="${eprefix-${PREFIX}}"
if [ x"${PREFIX}" = x"/" ]; then PREFIX=""; fi
if [ x"${EPREFIX}" = x"/" ]; then EPREFIX=""; fi
BINDIR="${bindir-${EPREFIX}/bin}"

# create Makefile from Makefile.in
echo "creating ${makefile}"
sed -e "s!@TARGET@!${TARGET}!g" \
    -e "s!@CC@!${CC}!g" \
    -e "s!@CFLAGS@!${CFLAGS}!g" \
    -e "s!@LDFLAGS@!${LDFLAGS}!g" \
    -e "s!@PACKAGE@!${PACKAGE}!g" \
    -e "s!@VERSION@!${VERSION}!g" \
    -e "s!@INSTALL_PROGRAM@!${INSTALL_PROGRAM}!g" \
	-e "s!@PREFIX@!${PREFIX}!g" \
	-e "s!@EPREFIX@!${EPREFIX}!g" \
    -e "s!@BINDIR@!${BINDIR}!g" \
	"${makefilein}" > "${makefile}"

echo >&5
echo "===== Output variables =====" >&5
echo CC="'${CC}'" >&5
echo CFLAGS="'${CFLAGS}'" >&5
echo LDFLAGS="'${LDFLAGS}'" >&5
echo PACKAGE="'${PACKAGE}'" >&5
echo TARGET="'${TARGET}'" >&5
echo VERSION="'${VERSION}'" >&5
echo INSTALL_PROGRAM="'${INSTALL_PROGRAM}'" >&5
echo PREFIX="'${PREFIX}'" >&5
echo EPREFIX="'${EPREFIX}'" >&5
echo BINDIR="'${BINDIR}'" >&5


# create version.h
echo "creating ${versionh}"
cat >"${versionh}" <<END
/* ${versionh}: generated by configure */
#define PACKAGE_NAME "${PACKAGE}"
#define PACKAGE_STRING "${PACKAGE} ${VERSION}"
#define PACKAGE_VERSION "${VERSION}"
#define PACKAGE_COPYRIGHT "Copyright (C) ${copyrightyear} magicant"
END


rm -f "${tempsrc}" "${tempout}"
