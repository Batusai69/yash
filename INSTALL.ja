Yash のビルドとインストールの方法


基本的なビルド・インストールの方法は以下の通りです:

  1. シェルを起動し、このファイルが入っているディレクトリに `cd' する。

  2. `sh configure' と入力して configure シェルスクリプトを実行する。
     このスクリプトは実行中のシステムで利用可能な機能を調査してビルド
     のために必要なファイルを生成します。

  3. `make' を起動して yash をビルドする。

  4. `make check' を起動して、ビルドした yash が正しく動作するかチェッ
     クする。(このチェックは飛ばしてもかまいません。)

  5. `make install' を実行して yash をインストールする。
     デフォルトのインストール先は /usr/local/bin/yash ですが、
     `configure' 実行時にオプションを指定しておけばインストール先を変
     えられます。またプログラム本体以外の補助ファイルも同時に (デフォ
     ルトでは /usr/local/share/yash に) インストールされます。インスト
     ールの際には管理者権限 (root) が必要でしょう。

Yash をアンインストールするには、`make uninstall' を実行してください。
ビルドによって生成されたオブジェクトファイルや実行可能ファイルを削除す
るには、`make clean' を実行してください。
`configure' およびビルドによって生成されたすべてのファイルを削除するに
は `make distclean' を実行してください。


========== configure スクリプト詳細 ==========

configure スクリプトは yash をコンパイルするためのコンパイラを選択しま
す。デフォルトのコンパイラは、POSIX で標準化されている `c99' コマンド
です。`c99' が利用できない場合、configure スクリプトは `gcc -std=c99'
の使用を試みます。`gcc' も利用できない場合は、`CC' 変数によってコンパ
イラを手動で指定する必要があります。

configure スクリプトの起動時にコマンドライン引数または環境変数によって
コンパイラやリンカ及びそれらのオプションを指定できます。例えば
    sh configure CC='cc'
としてスクリプトを起動すると、デフォルトの `c99' の代わりに `cc' をコ
ンパイラとして使用します。指定できる変数は以下のとおりです。

  CC
	コンパイラ・リンカ
  CFLAGS
	コンパイラオプション
  CADDS
	コンパイラの追加オプション
  LDFLAGS
	リンカオプション
  LDADDS
	リンカの追加オプション
  LDLIBS
	Yash にリンクするライブラリを指定するためのリンカの引数
  AR
	アーカイバ
  ARFLAGS
	アーカイバオプション
  INSTALL_PROGRAM
	インストーラ

configure スクリプトに指定可能なビルドオプション:

  -d --debug
	Yash をデバッグ用にビルドする。
	コード最適化が控えめになり、コンパイラの警告が抑制されなくなり
	ます。このオプションを使うには GCC コンパイラが必要です。

Yash や補助スクリプトのインストール先を指定するためのオプション:

  --prefix=...
	インストール先の基本先頭パス
	(デフォルト: /usr/local)
  --exec-prefix=...
	バイナリファイルのインストール先の基本先頭パス
	(デフォルト: <prefix>)
  --bindir=...
	実行可能プログラムのインストール先ディレクトリ
	(デフォルト: <exec-prefix>/bin)
  --datarootdir=...
	バイナリファイル以外のインストール先の基本先頭パス
	(デフォルト: <prefix>/share)
  --datadir=...
	補助スクリプトのインストール先
	(デフォルト: <datarootdir>)

Yash が備えている機能の中には、ビルド時に有効・無効を指定できるものが
あります。機能を有効にするには --enable=... オプションを、無効にするに
は --disable-... オプションを使用します。デフォルトでは、すべての機能
が有効です。

  --enable-alias --disable-alias
	エイリアスおよびそれを扱うための `alias', `unalias' 組込みコマ
	ンドを有効・無効にします。
  --enable-array --disable-array
	配列を処理するための `array' 組込みコマンドを有効・無効にしま
	す。この機能を無効にしても、配列変数そのものは常にサポートされ
	ます。
  --enable-dirstack --disable-dirstack
	ディレクトリスタックおよびそれを扱うための `dirs', `pushd',
	`popd' 組込みコマンドを有効・無効にします。
  --enable-help --disable-help
	`help' 組込みコマンドを有効・無効にします。
  --enable-history --disable-history
	コマンド履歴を扱うための `fc', `history' 組込みコマンドを有効
	・無効にします。
  --enable-lineedit --disable-lineedit
	対話シェルのための行編集機能を有効・無効にします。この機能を有
	効にするにはコマンド履歴機能も有効にしなければなりません。
  --enable-printf --disable-printf
	`printf', `echo' 組込みコマンドを有効・無効にします。
  --enable-socket --disable-socket
	ソケットリダイレクトを有効・無効にします。
  --enable-test --disable-test
	`test', `[' 組込みコマンドを有効・無効にします。
  --enable-ulimit --disable-ulimit
	`ulimit' 組込みコマンドを有効・無効にします。

ソケットリダイレクト機能を有効にしたにもかかわらず、システムがソケット
をサポートしていない場合は、configure スクリプトはエラーで中断されます。
この場合は、`--disable-socket' オプションでソケットリダイレクトを無効
にして configure スクリプトを実行し直してください。

`ulimit' 組込みコマンドを有効にしたにもかかわらず、システムが
`getrlimit', `setrlimit' 関数をサポートしていない場合は、configure ス
クリプトはエラーで中断されます。この場合は、`--disable-ulimit' オプシ
ョンで `ulimit' 組込みコマンドを無効にして configure スクリプトを実行
し直してください。

行編集機能を有効にしたにもかかわらず、configure スクリプトが curses ラ
イブラリを正しく見つけることができない場合は、configure スクリプトはエ
ラーで中断されます。この場合は以下のようにしてください。
  * `--disable-lineedit' オプションで行編集を無効にして configure スク
    リプトを実行し直す。
  * システムに curses ライブラリがインストールされていない場合は、イン
    ストールしてから configure スクリプトを実行し直す。
  * curses ライブラリの代わりに別のライブラリを使用したい場合は、
    `--with-term-lib=...' オプションでそのライブラリを指定して
    configure スクリプトを実行し直す。例えば `--with-term-lib=termcap'
    を指定するとリンカに `-ltermcap' オペランドが渡されます。


========== 高度な手動設定 ==========

以下は yash のコンパイル時にソース内で認識されるプリプロセッサマクロの
一覧です。これらの値を config.h に手動で追加定義して、yash の動作を変
更することができます。
オンオフ式の設定を有効にするには、マクロの値を 0 以外の整数に定義しま
す。無効にするには、値を 0 に定義するか、削除 (#undef) します。
オンオフ式でない設定項目は、以下のリスト内にデフォルト値を示してありま
す。
ここでは、configure スクリプトで自動的に設定されるマクロは説明しません。

#define DOUBLE_DIVISION_BY_ZERO_ERROR 1  /* オンオフ式 */
このマクロを設定すると、小数のゼロによる除算をエラーとします。デフォル
トでは、ゼロによる除算は有効な結果 (例えば無限大) を返すと仮定されます。

#define FORMAT_INDENT_WIDTH 3
このマクロは、シェルがコマンドを整形して出力する際のインデントの幅を指
定します。このマクロの値は非負整数でなければなりません。

#define YASH_DISABLE_SUPERUSER 1  /* オンオフ式 */
このマクロを設定すると、ユーザ ID が 0 のユーザを管理者権限を持つユー
ザとして特別扱いしないようにします。デフォルトでは、UID が 0 のユーザ
はアクセス権限のチェックなどにおいて他のユーザとは異なる扱いを受けます。

#define SHELLFDMINMAX 100
このマクロの値は 10 以上の整数で、デフォルトは 100 です。この値は、シ
ェルがそれ自身の作業のためにファイルを開く際に使用するファイルディスク
リプタの目安を指定します。

#define ALIAS_LIST_MAX 30
このマクロの値は、一度に再帰的に展開できるエイリアスの数を指定します。
このマクロの値は正の整数でなければなりません。

#define FIXED_SIGNAL_AS_ERROR 1  /* オンオフ式 */
非対話シェルにおいて、シェルが起動された時に最初からトラップが「無視」
に設定されていたシグナルのトラップを後から変更しようとしたときの動作を
指定します。このマクロが設定されていると、そのようなトラップの変更はエ
ラーになります。デフォルトでは、そのようなトラップを変更しようとしても
無視します。

#define FG_DONT_SAVE_TERMINAL 1  /* オンオフ式 */
端末の設定を操作するプログラムがバックグラウンドで起動され、後で `fg'
組込みコマンドで続行された場合、端末の設定がおかしなまま残ることがあり
ます。そのためデフォルトでは `fg' 組込みコマンドはプログラムを続行させ
る前に端末の設定を保存し、後で設定を元に戻します。しかしこのマクロが設
定してあると、`fg' 組込みコマンドは端末の設定を元に戻しません。

#define HISTORY_REFRESH_INTERVAL 100
シェルが履歴ファイルを再構築する間隔を指定します。ここで指定した数のコ
マンドが実行されるたびに、シェルはファイルを再構築します。
