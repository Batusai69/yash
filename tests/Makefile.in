# Makefile.in for test of yash
# (C) 2007-2009 magicant
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

.POSIX:
.SUFFIXES: .c .h .o

CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LDLIBS = @LDLIBS@
SOURCES = invoke.c resetsig.c
TEST_SOURCES = alias.p.tst alias.p.out alias.y.tst alias.y.out \
	builtin.p.tst builtin.p.out builtin.y.tst builtin.y.out dot.t \
	dirstack.y.tst dirstack.y.out \
	error.p.tst error.p.out error.y.tst error.y.out error.y.err \
	expand.p.tst expand.p.out expand.y.tst expand.y.out \
	fnmatch.p.tst fnmatch.p.out \
	history.y.tst history.y.out \
	input.p.tst input.p.out input.p.err input.p.OUT input.p.ERR input.p.t \
	input.y.tst input.y.out input.y.err input.y.ERR input.y.t \
	job.p.tst job.p.out \
	option.p.tst option.p.out option.p.err option.y.tst option.y.out \
	parser.p.tst parser.p.out parser.y.tst parser.y.out \
	path.p.tst path.p.out path.y.tst path.y.out \
	printf.y.tst printf.y.out \
	redir.p.tst redir.p.out redir.y.tst redir.y.out \
	sig.p.tst sig.p.out sig.y.tst sig.y.out \
	test.y.tst test.y.out \
	variable.p.tst variable.p.out variable.y.tst variable.y.out

TEST_ITEMS = *.tst  # the default test items

INVOKEOBJS = invoke.o
RESETSIGOBJS = resetsig.o
BYPRODUCTS = invoke resetsig *.dSYM

test test-all: invoke resetsig
	@./resetsig $(SHELL) ./run-test.sh
test-posix:
	@$(MAKE) TEST_ITEMS='*.p.tst' test

.c:
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< $(LDLIBS)
.c.o:
	$(CC) $(CFLAGS) -c $<

invoke: $(INVOKEOBJS)
resetsig: $(RESETSIGOBJS)

DISTCONTENTS = $(SOURCES) $(TEST_SOURCES) Makefile.in Makefile.deps run-test.sh
distcontents: $(DISTCONTENTS)
copy-distcontents: $(DISTCONTENTS)
	mkdir -p $(DISTTARGETDIR)
	@echo Copying contents to $(DISTTARGETDIR)
	@for f in $(DISTCONTENTS); do ln $$f $(DISTTARGETDIR); done

clean:
	rm -f $(BYPRODUCTS) $(INVOKEOBJS) $(RESETSIGOBJS)
distclean: clean
	rm -f Makefile
maintainer-clean: distclean
	rm -f Makefile.deps

.PHONY: test-all test-posix test distcontents copy-distcontents clean distclean maintainer-clean


